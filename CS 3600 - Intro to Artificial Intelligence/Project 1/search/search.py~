# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for 
# educational purposes provided that (1) you do not distribute or publish 
# solutions, (2) you retain this notice, and (3) you provide clear 
# attribution to UC Berkeley, including a link to 
# http://inst.eecs.berkeley.edu/~cs188/pacman/pacman.html
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero 
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and 
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util
import heapq

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()

def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    startNode = SearchNode(problem, problem.getStartState())
    open = util.Stack()
    open.push(startNode)
    closed = []
    while(not open.isEmpty()):
   	current = open.pop()
	closed.append(current)
	if(problem.isGoalState(current.state)):
	    break
        for successor in problem.getSuccessors(current.state):
	    new = SearchNode(problem, successor[0], successor[1], current)
            if(new.state not in closed):
                open.push(new)
    
    if(problem.isGoalState(current.state)):
       return current.path
    else:
       return []
                
def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    """
    startNode = SearchNode(problem, problem.getStartState())
    open = util.Queue()
    open.push(startNode)
    closed = []
    while(not open.isEmpty()):
   	current = open.pop()
	closed.append(current)
	if(problem.isGoalState(current.state)):
	    break
        for successor in problem.getSuccessors(current.state):
	    new = SearchNode(problem, successor[0], successor[1], current)
            if(new.state not in closed):
		closed.append(new)
                open.push(new)
    
    if(problem.isGoalState(current.state)):
       return current.path
    else:
       return []

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    startNode = SearchNode(problem, problem.getStartState())
    open = [startNode]
    closed = []
    while(len(open) != 0):
   	current = heapq.heappop(open)
	closed.append(current)
	if(problem.isGoalState(current.state)):
	    break
        for successor in problem.getSuccessors(current.state):
	    new = SearchNode(problem, successor[0], successor[1], current)
            if(new.state not in closed):
		if(new.state not in open):
		    heapq.heappush(open, new)
	    	else:
		    index = open.index(new.state)
		    check = open[index]
		    if(new.g < check.g):
			check.update(new)
		        heapq.heapify(open)
    
    if(problem.isGoalState(current.state)):
       return current.path
    else:
       return []

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    startNode = SearchNode(problem, problem.getStartState())
    open = [startNode]
    closed = []
    inconsistencies = 0
    while(len(open) != 0):
   	current = heapq.heappop(open)
	closed.append(current)
	#current.printData()
	if(problem.isGoalState(current.state)):
	    break
        for successor in problem.getSuccessors(current.state):
	    new = SearchNode(problem, successor[0], successor[1], current, heuristic)
	    if(new.state in closed):
		continue
	    #if(new.f < current.f or new.h < 0):
	    	#print("inconsistency", new.h, current.h, new.f, current.f, new.action, new.state, current.state)
	    	inconsistencies += 1
	    if(new.state not in open):
	        heapq.heappush(open, new)
    	    else:
	        index = open.index(new.state)
	        check = open[index]
	        if(new.g < check.g):
		    oldG = check.g
		    check.update(new)
		    print(oldG, check.g)
	            heapq.heapify(open)
    
    if(inconsistencies > 0):
	print("Total Inconsistencies", inconsistencies)

    if(problem.isGoalState(current.state)):
       return current.path
    else:
       return []

class SearchNode:
    def __init__(self, problem, state, action = None, parent = None, heuristic = nullHeuristic):
	self.problem = problem
	self.state = state
	self.parent = parent
	self.action = action
	if(parent != None and action != None):
	    self.path = parent.path + [action]
	else:
	    self.path = []
	self.h = heuristic(state, problem)
	self.g = problem.getCostOfActions(self.path)
	self.f = self.h + self.g

    def __eq__(self, other):
	if isinstance(other, self.__class__):
	    return self.state == other.state and self.f == other.f
	else:
	    return self.state == other

    def __lt__(self, other):
	if isinstance(other, self.__class__):
	    return self.f < other.f
	else:
	    return self.f < other

    def __gt__(self, other):
	if isinstance(other, self.__class__):
	    return self.f > other.f
	else:
	    return self.f > other

    def update(self, new):
	if isinstance(new, self.__class__):
	    self.parent = new.parent
	    self.action = new.action
	    self.path = new.path
	    self.g = new.g
	    self.f = new.f
	    
    def findPath(self):
	if(self.parent != None):
	    return self.parent.findPath() + [self.action]
	else:
	    return []

    def printData(self):
	if(self.parent != None):
	    x = self.parent.h
	    y = self.parent.state
	else:
	    x = None
	    y = None
	print(self.f, self.h, x, y)

# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
