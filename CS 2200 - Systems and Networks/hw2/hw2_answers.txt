Homework 2
CS 2200 Fall 2013

James Liu
902813083
===================

=========
Problem 1
=========

Part A
------

i) Without PCINC

     State1
	  DrPC,LdA,LdMAR
	  Goto State2
	  
     State2
	  DrMEM, LdIR
	  Goto State3
	  
	 State3
	  DrALU, ALUOpHi, ALUOpLo, LdPC, OPTest
	  Goto State4
	
	 State4
	  RegSelLo, DrREG, LdA
	  Goto State5
	 
	 State5
	  DrOFF, LdB
	  Goto State6
	  
	 State6
	  DrALU, WrREG
	  Goto State0
	  
ii) With PCINC 
  
     State1
	  DrPC, LdMAR, IncToPC, LdPC
	  Goto State2
	  
     State2
	  DrMEM, LdIR
	  Goto State3
	  
	 State3
	  OPTest
	  Goto State4
	
	 State4
	  RegSelLo, DrREG, LdA
	  Goto State5
	 
	 State5
	  DrOFF, LdB
	  Goto State6
	  
	 State6
	  DrALU, WrREG
	  Goto State0
	  
 Part B
 ------
 With PCINC: 6
 Without PCINC: 6
 
 Part C
 ------
 Speedup = T_before / T_after
		 = (CPI_before * CLKSpeed) / (CPI_after * CLKSpeed)
         = (6 * CLKSpeed) / (6 * CLKSpeed)
		 = 1.0
 

=========
Problem 2
=========

Part A
-------
i)
	Intel GCC: 0.22 / 1.5 + 0.78 = 0.92666
	AMD GCC: 0.33 / 2 + 0.67 = 0.835
	Intel spice: 0.37 / 1.5+ 0.63 = 0.876666
	AMD spice: 0.24 / 2 + 0.76 = 0.88
ii)
	AMD
iii)
	Intel
	
Part B
-------
	(x / 15) + ((1 - x)/ 1) = 1 / 3
	x + 15 - 15x = 5
	-14x = -10
	x = 10/14 = 0.714285 = 71.4285%

=========
Problem 3
=========

Part A
------
				   task
                   ----
time   BG      DISK      SOUND     CLOCK
----   --      ----      -----     -----

 0mS:                             CLOCK   C,D,S
 2mS:          DISK
 4mS:          DISK
 6mS:		   DISK
 8mS:		   DISK
10mS:					 		  CLOCK   C
12mS:					 SOUND
14mS:					 SOUND
16mS:					 SOUND
18mS:  BG
20mS:							  CLOCK   C,S
22mS: 					 SOUND
24mS: 					 SOUND
26mS:					 SOUND
28mS:  BG
30mS:							  CLOCK   C
32mS:  BG
34mS:  BG
36mS:  BG
38mS:  BG
40mS:							  CLOCK   C,S
42mS:					 SOUND
44mS:					 SOUND
46mS:					 SOUND
48mS:  BG
50mS:							  CLOCK   C

Part B
------
	Sound: 50 * 6 = 300, 300/1000ms per second are used for sound
	Disk:  10 * 8 = 80, 80/1000ms per second are used for disk
	Clock: 100 * 2 = 200, 200/1000ms per second are used for clock
	Total 580ms per second are used for interrupts
	Thus 420/1000ms per second are used for background tasks
	10,000/420 = approximately 23.809s to complete background task
Part C
------
	Disk: 10ms (Clock + Disk)
	Sound: 18ms (Clock * 2 + Disk + Sound)
	Clock: 2ms (Clock)
=========
Problem 4
=========

Part A
------
Synchronous and asynchronous events differ in whether they occur in sync with another event, like a clock trigger.
Synchronous events occur simultaneously and in sync with specific events, whereas asynchronous events can
occur whenever it wishes to.

For example, a register storing input in response to a clock trigger is synchronous, but an AND gate changing
its output regardless of clock trigger is asynchronous.
Part B
------
The interrupt vector table is used to properly handle interrupts generated by external devices. It is a large
array of memory locations that hold instructions for the corresponding interrupt handler for the interrupt that 
was received.

The exception/trap register holds the trap/exception/interrupt "index" value, it selects the point along the 
interrupt vector table to select which address to jump to when interrupted. The value it holds is akin to that of
an "op code" for interrupts, it decides which interrupt handler to use for the interrupt that was received.
Part C
------
Upon receiving the interrupt, the processor switches to the INT macrostate and saves the PC to $k0. The hardware then
loads the target address for the interrupt handler from the interrupt vector table, a table of memory addresses for respective
interrupts that is pre-populated by the operating system. The system then switches the mode to kernel and loads the address 
into the PC and executes the interrupt handler code.
Part D
------
Save $k0
Enable Interrupts
Save interrupted process to stack
Execute device code
Restore interrupted process from stack
Disable Interrupts
Restore $k0
Execute RETI to return
Part E
------
By hardware definition, interrupts are disabled upon entering a new interrupt state, however some interrupts may need to
allow for higher priority interrupts to interject during the middle of execution. Doing so however, will trash $k0. Thus
saving registers to the stack in interrupts need to be executed in the following way:

(entry into interrupt handler, interrupts disabled)
save $k0
enable interrupts
save registers as usual
...

When loading the opposite needs to be done, to prevent another interrupt from trashing $k0 while preparing to return to normal execution,
interrupts need to be disabled to make loading $k0 and returning to normal execution atomic. Thus loading saved registers in interrupts need
to be executed in the following way.

execution of interrupt handling code, interrupts enabled
load registers as usual
disable interrupts
load $k0
return from interrupt (reenables interrupts)

Lastly the other main difference is that instead of the user defined stack used in normal procedure calls, interrupts use the system stack to prevent 
possible messups with the user stack and ensure functionality of the stack when handling interrupts.
Part F
------
The user stack pointer $sp is not strictly defined to be the stack pointer and the compiler/user can use it for whatever
they wish to use it for. Thus to ensure that interrupts do not cause any unnecessary changes to the user 
Part G
------
Load PC to $k0
Load mode from system stack		(lw)
Enable interrupts
Jump to $k0						(jalr)