All of my experiments were run on Weka 3.6.10, from the command line.

The following commands were used

FILE_LOCATION is the absolute system path to the evaluated dataset

DECISION TREES

java -cp ./weka.jar weka.classifiers.trees.J48 -C CONFIDENCE -M 2 -t FILE_LOCATION
    -For the pruned trees, where CONFIDENCE is the confidence used
java -cp ./weka.jar weka.classifiers.trees.J48 -U -M 2 -t FILE_LOCATION
    -For the unpruned trees

NEURAL NETWORKS

java -cp ./weka.jar weka.classifiers.functions.MultilayerPerceptron -L LEARNING_RATE -M MOMENTUM -N EPOCHS -V 0 -S 0 -E 20 -H a -t FILE_LOCATION -no-cv -split-percentage 90

BOOSTING

java -cp ./weka.jar weka.classifiers.meta.AdaBoostM1 -P 100 -S 1 -I BOOSTING_ITERATIONS -t FILE_LOCATION -W weka.classifiers.trees.J48 -- -C CONFIDENCE_LEVEL -M 2
	-For pruned trees
java -cp ./weka.jar weka.classifiers.meta.AdaBoostM1 -P 100 -S 1 -I BOOSTING_ITERATIONS -t FILE_LOCATION -W weka.classifiers.trees.J48 -- -U -M 2
	-For unpruned trees

KNN

java -cp ./weka.jar weka.classifiers.lazy.IBk -K NEAREST_NEIGHBORS -W 0 -t FILE_LOCATION -A "weka.core.neighboursearch.LinearNNSearch -A \"weka.core.EuclideanDistance -R first-last\""

SUPPORT VECTOR MACHINE

java -cp ./weka.jar weka.classifiers.functions.SMO -C 1.0 -L 0.001 -P 1.0E-12 -N 0 -V -1 -W 1 -K "weka.classifiers.functions.supportVector.PolyKernel -C 250007 -E EXPONENT"
	-For Poly Kernel
java -cp weka.classifiers.functions.SMO -C 1.0 -L 0.001 -P 1.0E-12 -N 0 -V -1 -W 1 -K "weka.classifiers.functions.supportVector.RBFKernel -C 250007 -G GAMMA"
	-For RBF Kernel
-----------------------------------------------------------------------------------------------------------------------------
ATTRIBUTE DESCIRPTION FOR KRKOPT (TAKEN DIRECTLY FROM DATASET DESCRIPTION ON UCI MACHINE LEARNING DATABASE)
1. Title:
   Chess Endgame Database for White King and Rook against Black King (KRK) -
   Black-to-move Positions Drawn or Lost in N Moves.

2. Source Information:
   -- Creators: Database generated by Michael Bain and Arthur van Hoff
      at the Turing Institute, Glasgow, UK.
   -- Donor: Michael Bain (mike@cse.unsw.edu.au), AI Lab, Computer Science,
      University of New South Wales, Sydney 2052, Australia.
      (tel) +61 2 385 3939
      (fax) +61 2 663 4576
   -- Date: June, 1994.

3. Past Usage:

	Chess endgames are complex domains which are enumerable. Endgame
   databases are tables of stored game-theoretic values for the enumerated
   elements (legal positions) of the domain. The game-theoretic values stored
   denote whether or not positions are won for either side, or include also
   the depth of win (number of moves) assuming minimax-optimal play. From the
   point of view of experiments on computer induction such databases provide
   not only a source of examples but also an oracle (Roycroft, 1986) for
   testing induced rules. However a chess endgame database differs from, say,
   a relational database containing details of parts and suppliers in the
   following important respect. The combinatorics of computing the required
   game-theoretic values for individual position entries independently would
   be prohibitive. Therefore all the database entries are generated in a single
   iterative process using the ``standard backup'' algorithm (Thompson, 1986).

   A KRK database was described by Clarke (1977). The current database was
   described and used for machine learning experiments in Bain (1992; 1994). It
   should be noted that our database is not guaranteed correct, but the class
   distribution is the same as Clarke's database. In (Bain 1992; 1994) the
   task was classification of positions in the database as won for white in a
   fixed number of moves, assuming optimal play by both sides. The problem was
   structured into separate sub-problems by depth-of-win ordered draw, zero,
   one, ..., sixteen. When learning depth d all examples at depths > d are
   used as negatives. Quinlan (1994) applied Foil to learn a complete and
   correct solution for this task.

   	The typical complexity of induced classifiers in this domain suggest
   that the task is demanding when background knowledge is restricted.


4. Relevant Information:
   An Inductive Logic Programming (ILP) or relational learning framework is
   assumed (Muggleton, 1992). The learning system is provided with examples
   of chess positions described only by the coordinates of the pieces on the
   board. Background knowledge in the form of row and column differences is
   also supplied. The relations necessary to form a correct and concise
   classifier for the target concept must be discovered by the learning system
   (the examples already provide a complete extensional definition).
   The task is closely related to Quinlan's (1983) application of ID3 to
   classify White King and Rook against Black King and Knight (KRKN) positions
   as lost 2-ply or lost 3-ply. The framework is similar in that the example
   positions supply only low-grade data. An important difference is that
   additional background predicates of the kind supplied in the KRKN study via
   hand-crafted attributes are not provided for this KRK domain.

5. Number of Instances: 28056

6. Number of Attributes:
   There are six attribute variables and one class variable.

7. Attribute Information:
   1. White King file (column)
   2. White King rank (row)
   3. White Rook file
   4. White Rook rank
   5. Black King file
   6. Black King rank
   7. optimal depth-of-win for White in 0 to 16 moves, otherwise drawn
	{draw, zero, one, two, ..., sixteen}.


8. Missing Attribute Values: None

9. Class Distribution:

   draw       2796
   zero         27
   one          78
   two         246
   three        81
   four        198
   five        471
   six         592
   seven       683
   eight      1433
   nine       1712
   ten        1985
   eleven     2854
   twelve     3597
   thirteen   4194
   fourteen   4553
   fifteen    2166
   sixteen     390

   Total     28056


10. Note: Foil is available by anonymous ftp from ftp.cs.su.oz.au, file
    pub/foil6.sh.


References: (BibTeX format)

@incollection{bain_1992,
        AUTHOR = "M. Bain",
        TITLE = "Learning optimal chess strategies",
        BOOKTITLE = "{ILP 92}: {P}roc. {I}ntl. {W}orkshop on
		{I}nductive {L}ogic {P}rogramming",
        YEAR = 1992,
        VOLUME = "ICOT TM-1182",
        EDITOR = "S. Muggleton",
        PUBLISHER = "Institute for New Generation Computer Technology",
        ADDRESS = "Tokyo, Japan"}

@phdthesis{bain_1994,
        TITLE = "Learning {L}ogical {E}xceptions in {C}hess",
        AUTHOR = "M. Bain",
        SCHOOL = "University of Strathclyde",
        YEAR = "1994"}

@incollection{clarke_1977,
        AUTHOR = "M. R. B. Clarke",
        TITLE = "A {Q}uantitative {S}tudy of {K}ing and {P}awn
		{A}gainst {K}ing",
	BOOKTITLE = "Advances in Computer Chess",
        VOLUME = 1,
        PAGES = "108--118",
        EDITOR = "M. R. B. Clarke",
        PUBLISHER = "Edinburgh University Press",
        ADDRESS = "Edinburgh",
        YEAR = "1977"}

@incollection{muggleton_1992,
        AUTHOR = "S. Muggleton",
        TITLE = "Inductive {L}ogic {P}rogramming",
        BOOKTITLE = "Inductive {L}ogic {P}rogramming",
        PAGES = "3--27",
        EDITOR = "S. Muggleton",
        PUBLISHER = "Academic Press",
        ADDRESS = "London",
        YEAR = "1992"}

@incollection{quinlan_1983,
        AUTHOR = "J. R. Quinlan",
        TITLE = "Learning {E}fficient {C}lassification {P}rocedures and their
                {A}pplication to {C}hess {E}nd {G}ames",
        YEAR = 1983,
        PAGES = "464--482",
        BOOKTITLE = "Machine Learning: An Artificial Intelligence
                        Approach",
        EDITOR = "R. Michalski and J. Carbonnel and T. Mitchell",
        PUBLISHER = "Tioga",
        ADDRESS = "Palo Alto, CA"}

@misc{quinlan_1994,
        AUTHOR = "J. R. Quinlan",
        YEAR = 1994,
        NOTE = "Personal Communication"}

@article{roycroft_1986,
        AUTHOR = "A. J. Roycroft",
        TITLE = "Database ``{O}racles'': {N}ecessary and desirable features",
        JOURNAL = "International Computer Chess Association Journal",
        YEAR = "1986",
        VOLUME = 8,
        NUMBER = 2,
        PAGES = "100--104"}

@article{thompson_1986,
        AUTHOR = "K. Thompson",
        TITLE  = "Retrograde {A}nalysis of {C}ertain {E}ndgames",
        JOURNAL = "International Computer Chess Association Journal",
        YEAR = "1986",
        VOLUME = "8",
        NUMBER = "3",
        PAGES = "131--139"}

-----------------------------------------------------------------------------------------------------------------------------
ATTRIBUTES DESCRIPTION FOR SPAMBASE (TAKEN DIRECTLY FROM DATASET DESCRIPTION ON UCI MACHINE LEARNING DATABASE)
| 48 continuous real [0,100] attributes of type word_freq_WORD 
| = percentage of words in the e-mail that match WORD,
| i.e. 100 * (number of times the WORD appears in the e-mail) / 
| total number of words in e-mail.  A "word" in this case is any 
| string of alphanumeric characters bounded by non-alphanumeric 
| characters or end-of-string.
|
| 6 continuous real [0,100] attributes of type char_freq_CHAR
| = percentage of characters in the e-mail that match CHAR,
| i.e. 100 * (number of CHAR occurences) / total characters in e-mail
|
| 1 continuous real [1,...] attribute of type capital_run_length_average
| = average length of uninterrupted sequences of capital letters
|
| 1 continuous integer [1,...] attribute of type capital_run_length_longest
| = length of longest uninterrupted sequence of capital letters
|
| 1 continuous integer [1,...] attribute of type capital_run_length_total
| = sum of length of uninterrupted sequences of capital letters
| = total number of capital letters in the e-mail
|
| 1 nominal {0,1} class attribute of type spam
| = denotes whether the e-mail was considered spam (1) or not (0), 
| i.e. unsolicited commercial e-mail.  
|
| For more information, see file 'spambase.DOCUMENTATION' at the
| UCI Machine Learning Repository: http://www.ics.uci.edu/~mlearn/MLRepository.html


1, 0.    | spam, non-spam classes

word_freq_make:         continuous.
word_freq_address:      continuous.
word_freq_all:          continuous.
word_freq_3d:           continuous.
word_freq_our:          continuous.
word_freq_over:         continuous.
word_freq_remove:       continuous.
word_freq_internet:     continuous.
word_freq_order:        continuous.
word_freq_mail:         continuous.
word_freq_receive:      continuous.
word_freq_will:         continuous.
word_freq_people:       continuous.
word_freq_report:       continuous.
word_freq_addresses:    continuous.
word_freq_free:         continuous.
word_freq_business:     continuous.
word_freq_email:        continuous.
word_freq_you:          continuous.
word_freq_credit:       continuous.
word_freq_your:         continuous.
word_freq_font:         continuous.
word_freq_000:          continuous.
word_freq_money:        continuous.
word_freq_hp:           continuous.
word_freq_hpl:          continuous.
word_freq_george:       continuous.
word_freq_650:          continuous.
word_freq_lab:          continuous.
word_freq_labs:         continuous.
word_freq_telnet:       continuous.
word_freq_857:          continuous.
word_freq_data:         continuous.
word_freq_415:          continuous.
word_freq_85:           continuous.
word_freq_technology:   continuous.
word_freq_1999:         continuous.
word_freq_parts:        continuous.
word_freq_pm:           continuous.
word_freq_direct:       continuous.
word_freq_cs:           continuous.
word_freq_meeting:      continuous.
word_freq_original:     continuous.
word_freq_project:      continuous.
word_freq_re:           continuous.
word_freq_edu:          continuous.
word_freq_table:        continuous.
word_freq_conference:   continuous.
char_freq_;:            continuous.
char_freq_(:            continuous.
char_freq_[:            continuous.
char_freq_!:            continuous.
char_freq_$:            continuous.
char_freq_#:            continuous.
capital_run_length_average: continuous.
capital_run_length_longest: continuous.
capital_run_length_total:   continuous.
-----------------------------------------------------------------------------------------------------------------------------